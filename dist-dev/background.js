var d=Object.defineProperty;var u=(n,e,t)=>e in n?d(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var i=(n,e,t)=>u(n,typeof e!="symbol"?e+"":e,t);class l{constructor(e,t){i(this,"dbName");i(this,"storeName");i(this,"db");this.dbName=e,this.storeName=t,this.db=null}async init(){return new Promise((e,t)=>{const r=indexedDB.open(this.dbName,1);r.onupgradeneeded=s=>{const a=s.target.result;a.objectStoreNames.contains(this.storeName)||a.createObjectStore(this.storeName,{keyPath:"id",autoIncrement:!0})},r.onsuccess=s=>{this.db=s.target.result,e()},r.onerror=s=>{t(`IndexedDB error: ${s.target.error}`)}})}async add(e){return new Promise((t,r)=>{if(!this.db)return r("Database is not initialized");const o=this.db.transaction(this.storeName,"readwrite").objectStore(this.storeName).add(e);o.onsuccess=()=>t(o.result),o.onerror=()=>r(`Add failed: ${o.error}`)})}async put(e){return new Promise((t,r)=>{if(!this.db)return r("Database is not initialized");const o=this.db.transaction(this.storeName,"readwrite").objectStore(this.storeName).put(e);o.onsuccess=()=>t(o.result),o.onerror=()=>r(`Put failed: ${o.error}`)})}async get(e){return new Promise((t,r)=>{if(!this.db)return r("Database is not initialized");const o=this.db.transaction(this.storeName,"readonly").objectStore(this.storeName).get(e);o.onsuccess=()=>t(o.result),o.onerror=()=>r(`Get failed: ${o.error}`)})}async getAll(){return new Promise((e,t)=>{if(!this.db)return t("Database is not initialized");const a=this.db.transaction(this.storeName,"readonly").objectStore(this.storeName).getAll();a.onsuccess=()=>e(a.result),a.onerror=()=>t(`GetAll failed: ${a.error}`)})}async delete(e){return new Promise((t,r)=>{if(!this.db)return r("Database is not initialized");const o=this.db.transaction(this.storeName,"readwrite").objectStore(this.storeName).delete(e);o.onsuccess=()=>t(),o.onerror=()=>r(`Delete failed: ${o.error}`)})}}const c=new l("SiteNoteDB","notes");c.init().catch(n=>console.error("Failed to initialize DB:",n));chrome.runtime.onMessage.addListener((n,e,t)=>{if(n.type==="GET_CURRENT_TAB")return chrome.tabs.query({active:!0,currentWindow:!0},r=>{const s=r[0];t({tab:s})}),!0;if(n.type==="SAVE_NOTE"){const{id:r,url:s,data:a}=n.payload;return c.put({id:r,url:s,data:a}).then(()=>{t({success:!0})}).catch(o=>{console.error("Failed to save note:",o),t({success:!1,error:o})}),!0}if(n.type==="GET_NOTE"){const{id:r}=n.payload;return c.get(r).then(s=>{t({success:!0,data:s==null?void 0:s.data})}).catch(s=>{console.error("Failed to get note:",s),t({success:!1,error:s})}),!0}});
